// Сначало идут абсолютные пути, потом относительные.
const validator = require('validator');
// Оно идёт в папочку node_modules в файл index.js где благодаря export подтягивает объект в код
// var _default = validator;
// exports.default = _default;
// module.exports = exports.default;
// module.exports.default = exports.default;
const greeter = require("./greeter")
greeter('Hello my pussy friend! ヽ(°□° )ノ')
// В том файле, где я хочу поюзать экспортируемую сущность использую
// функцию require() в которую передаём путь того файла который хотим юзать(в строку'')
// расшерение по умолчанию js поэтому можем неуказывать

// Перед инииализацией проекта - лупим имя и почту
// npm config set init.author.name "YOUR_NAME"
// npm config set init.author.email "YOUR_EMAIL"

// После чего, можем инициализировать: npm init --yes (сокращённо -y)

// npm "Script" (in package.json) - отличный способ, заменить сложные команды до одного имени
// В "Script" in package.json можно записывать команды, которые мы бы хотели вызвать из терминала
// Например: команда "hello": будет выполнять "node index.js" Прописываем это и вызываем: npm run hello
// Используя в названии команды ключевое имя start - вызывать run, нет необходимости
// Скриптов может быть сколько угодно - разделяются запятой просто

// Пакетики.. 
// Для установки пакетов идём на сайт  https://www.npmjs.com/ выбираем "вкусняшку". Ставим через команду npm i validator
// Создаётся файлик package-lock.json который нужем нашему package.json и хранит версии "зависимостей". Нам он нах не нужен.
// Пакетики все хранятся в скрытой папочке   node_modules и её НУЖНО ОБЯЗАТЕЛЬНО игнорировать в Гите!!!
// Для этого отправляем\прописываем имя файлика с слешем node_modules/ в .gitignore

// Внизу файла package.js мы можем лицезреть установленные пакеты в "зависимостях" "dependencies": {"validator": "^13.5.1"}

// Чтобы юзать эти пакеты, из папки node_modules мы можем забирать / require их абсолютным путём.В доках(там где мы брали
// инстолятор пакета на npmjs.com) смотрим какой путь необходимо указать в "require"

// Ознакамливаемся с доками. Читаем, что нам необходимо, чтобы юзать пакет.
const validateEmail = email => {
  return validator.isEmail(email);
};

console.log(
  'Is mango@mail.com a valid email?: ',
  validateEmail('mango@mail.com'),
);

console.log(
  'Is Mangozedog.com a valid email?: ',
  validateEmail('Mangozedog.com'),
);

// Теперь запуская наш скрипт в консоле через "npm start" - увидим результат работы,
//     сначало нашей импортированной функции greeter, а потом  console.log - и функции validateEmail. 

// Зависимости(пакеты) имеют разное предназначение(продакшн / разработка / глобалка).
// Устанавливаем их в зависимости от нашего предназначения.
// На продакшн через--save(по умолчанию) 
// На разработку, через--save - dev либо - D
// На глобалку не юзаем в принципе
// Удляем пакеты через npm uninstall ...пакет


// Что если, я поставил все необходимые зависимости и хочу поделиться своим проектом с кем-либо ещё
// 1. Льём на ГитХаб
// 2. Челик, который с нами работает может покопировать все файлы - исходники
// 3. Идёт в терминале в эту папку с исходниками ("cd../../"папка с исходниками")
// 4. И набирая npm install - смотрит в корне папки на dependences,
// устанавливает все зависимости в эту папку, которые прописаны в package.js

// ======================  npm - chek - updates ==============================

// Версии пакетов должны соответствоватьтем на которых мы пилали,
// иначе могут появиться ошибки ввиду изменения API(интерфейса) пакета.
// Если же проект юзается на какая-либо определённой версии, тогда мы её не обновляем!

// npm - chek - updates на npmjs.com следит за обновой пакетов 
// npm install -g npm-check-updates ставим на глобалку
// Для работы с чек - апгрейдером необходимо разрешить выполнение пакета в защитнике Виндовс 
// Set-ExecutionPolicy -ExecutionPolicy RemoteSigned 
// Если понадобиться удалить политику выполнения: Set-ExecutionPolicy -ExecutionPolicy Undefined -Scope LocalMachine
// Теперь для проверки текущих обнов достаточно запустить команду ncu

// ncu -u обновит файл package.json
// после чего npm install затянет все пакетики со свежими версиями

// ============================== Транспиляция кода Babeljs.io ==============================

// Command Line Interfeice (CLI) - пакет, который поможет преобразовывать наш код для старых версий браузера

// Кидаем себе в проект npm install --save-dev @babel/core @babel/cli 
// Отлично, теперь эти зависимости появились в package.json
// "devDependencies": {
//     "@babel/cli": "^7.12.8",
//         "@babel/core": "^7.12.9",
// }

// Теперь мы сделаем скрипт в package.json, который будет вызываать наш babel
// "scripts": {
//     "start": "node index.js"
//  "build": "babel src -d lib"
//   },
// и будет чётделать с файликом
// src - вход там где наши файлы для переделки
// lib - выход результирующий
// Для того чтобы указать Бабелю, какие фичи переводить а какие нет используем пресеты(набор правил)
// npm install @babel/preset-env --save-dev Добавляем этот пресет себе в проект
// Также в корне проекта создаём файлик babel.config.json в который ложим массив пресета 
// {
//   "presets": ["@babel/preset-env"]
// } 
// Запускаем командой  npm run build 
// В папочке lib имеем теперь наши переделанные файлы!

// Если юзаем какие - либо супер современные вещи, то Баблик предложит поставить необходимые пресеты или плагин 
// + надо будет дописать массив пресета или плагина в  babel.config.json